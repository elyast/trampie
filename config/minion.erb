# Copyright (c) 2014 Nokia Solutions and Networks Oy Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.

##### Primary configuration settings #####
##########################################

# Per default the minion will automatically include all config files
# from minion.d/*.conf (minion.d is a directory in the same directory
# as the main minion config file).
#default_include: minion.d/*.conf
<% if minion['default_include'] -%>
default_include: <%= minion['default_include'] %>
<% end -%>

# Set the location of the salt master server, if the master server cannot be
# resolved, then the minion will fail to start.
#master: salt
<% if minion['master'] -%>
master: <%= minion['master'] %>
<% end -%>

# If multiple masters are specified in the 'master' setting, the default behavior
# is to always try to connect to them in the order they are listed. If random_master is
# set to True, the order will be randomized instead. This can be helpful in distributing
# the load of many minions executing salt-call requests, for example from a cron job.
# If only one master is listed, this setting is ignored and a warning will be logged.
#random_master: False


# Set whether the minion should connect to the master via IPv6
#ipv6: False
<% if minion['ipv6'] -%>
ipv6: <%= minion['ipv6'] %>
<% end -%>

# Set the number of seconds to wait before attempting to resolve
# the master hostname if name resolution fails. Defaults to 30 seconds.
# Set to zero if the minion should shutdown and not retry.
# retry_dns: 30
<% if minion['retry_dns'] -%>
retry_dns: <%= minion['retry_dns'] %>
<% end -%>

# Set the port used by the master reply and authentication server
#master_port: 4506
<% if minion['master_port'] -%>
master_port: <%= minion['master_port'] %>
<% end -%>

# The user to run salt
#user: root
<% if minion['user'] -%>
user: <%= minion['user'] %>
<% end -%>

# Specify the location of the daemon process ID file
#pidfile: /var/run/salt-minion.pid
<% if minion['pidfile'] -%>
pidfile: <%= minion['pidfile'] %>
<% end -%>

# The root directory prepended to these options: pki_dir, cachedir, log_file,
# sock_dir, pidfile.
#root_dir: /
<% if minion['root_dir'] -%>
root_dir: <%= minion['root_dir'] %>
<% end -%>

# The directory to store the pki information in
#pki_dir: /etc/salt/pki/minion
<% if minion['pki_dir'] -%>
pki_dir: <%= minion['pki_dir'] %>
<% end -%>

# Explicitly declare the id for this minion to use, if left commented the id
# will be the hostname as returned by the python call: socket.getfqdn()
# Since salt uses detached ids it is possible to run multiple minions on the
# same machine but with different ids, this can be useful for salt compute
# clusters.
#id:
<% if minion['id'] -%>
id: <%= minion['id'] %>
<% end -%>

# Append a domain to a hostname in the event that it does not exist.  This is
# useful for systems where socket.getfqdn() does not actually result in a
# FQDN (for instance, Solaris).
#append_domain:
<% if minion['append_domain'] -%>
append_domain: <%= minion['append_domain'] %>
<% end -%>

# Custom static grains for this minion can be specified here and used in SLS
# files just like all other grains. This example sets 4 custom grains, with
# the 'roles' grain having two values that can be matched against:
#grains:
#  roles:
#    - webserver
#    - memcache
#  deployment: datacenter4
#  cabinet: 13
#  cab_u: 14-15
<% if grains and grains.size > 0 -%>
<%= YAML.dump({'grains' => grains}).sub(/.*?\n/, '') %>
<% end -%>

# Where cache data goes
#cachedir: /var/cache/salt/minion
<% if minion['cachedir'] -%>
cachedir: <%= minion['cachedir'] %>
<% end -%>

# Verify and set permissions on configuration directories at startup
#verify_env: True
<% if minion['verify_env'] -%>
verify_env: <%= minion['verify_env'] %>
<% end -%>

# The minion can locally cache the return data from jobs sent to it, this
# can be a good way to keep track of jobs the minion has executed
# (on the minion side). By default this feature is disabled, to enable
# set cache_jobs to True
#cache_jobs: False
<% if minion['cache_jobs'] -%>
cache_jobs: <%= minion['cache_jobs'] %>
<% end -%>

# set the directory used to hold unix sockets
#sock_dir: /var/run/salt/minion
<% if minion['sock_dir'] -%>
sock_dir: <%= minion['sock_dir'] %>
<% end -%>

# Set the default outputter used by the salt-call command. The default is
# "nested"
#output: nested
<% if minion['output'] -%>
output: <%= minion['output'] %>
<% end -%>
#
# By default output is colored, to disable colored output set the color value
# to False
#color: True
<% if minion['color'] -%>
color: <%= minion['color'] %>
<% end -%>

# Do not strip off the colored output from nested results and states outputs
# (true by default)
# strip_colors: false

# Backup files that are replaced by file.managed and file.recurse under
# 'cachedir'/file_backups relative to their original location and appended
# with a timestamp. The only valid setting is "minion". Disabled by default.
#
# Alternatively this can be specified for each file in state files:
#
# /etc/ssh/sshd_config:
#   file.managed:
#     - source: salt://ssh/sshd_config
#     - backup: minion
#
#backup_mode: minion
<% if minion['backup_mode'] -%>
backup_mode: <%= minion['backup_mode'] %>
<% end -%>

# When waiting for a master to accept the minion's public key, salt will
# continuously attempt to reconnect until successful. This is the time, in
# seconds, between those reconnection attempts.
#acceptance_wait_time: 10
<% if minion['acceptance_wait_time'] -%>
acceptance_wait_time: <%= minion['acceptance_wait_time'] %>
<% end -%>

# If this is nonzero, the time between reconnection attempts will increase by
# acceptance_wait_time seconds per iteration, up to this maximum. If this is
# set to zero, the time between reconnection attempts will stay constant.
#acceptance_wait_time_max: 0
<% if minion['acceptance_wait_time_max'] -%>
acceptance_wait_time_max: <%= minion['acceptance_wait_time_max'] %>
<% end -%>

# If the master rejects the minion's public key, retry instead exiting. Rejected keys
# # will be handled the same as waiting on acceptance.
#rejected_retry: False


# When the master key changes, the minion will try to re-auth itself to receive
# the new master key. In larger environments this can cause a SYN flood on the
# master because all minions try to re-auth immediately. To prevent this and
# have a minion wait for a random amount of time, use this optional parameter.
# The wait-time will be a random number of seconds between
# 0 and the defined value.
#random_reauth_delay: 60
<% if minion['random_reauth_delay'] -%>
random_reauth_delay: <%= minion['random_reauth_delay'] %>
<% end -%>

# When waiting for a master to accept the minion's public key, salt will
# continuously attempt to reconnect until successful. This is the timeout value,
# in seconds, for each individual attempt. After this timeout expires, the minion
# will wait for acceptance_wait_time seconds before trying again.
# Unless your master is under unusually heavy load, this should be left at the default.
#auth_timeout: 60

# Number of consecutive SaltReqTimeoutError that are acceptable when trying to authenticate.
#auth_tries: 7

# If authentication fails due to SaltReqTimeoutError during a ping_interval,
# cause sub minion process to restart.
#auth_safemode: False

# Ping Master to ensure connection is alive (minutes).
# TODO: perhaps could update the scheduler to raise Exception in main thread after /mine_interval (60 minutes)/ fails
#ping_interval: 90

# If you don't have any problems with syn-floods, dont bother with the
# three recon_* settings described below, just leave the defaults!
#
# The ZeroMQ pull-socket that binds to the masters publishing interface tries
# to reconnect immediately, if the socket is disconnected (for example if
# the master processes are restarted). In large setups this will have all
# minions reconnect immediately which might flood the master (the ZeroMQ-default
# is usually a 100ms delay). To prevent this, these three recon_* settings
# can be used.
#
# recon_default: the interval in milliseconds that the socket should wait before
#                trying to reconnect to the master (100ms = 1 second)
#
# recon_max: the maximum time a socket should wait. each interval the time to wait
#            is calculated by doubling the previous time. if recon_max is reached,
#            it starts again at recon_default. Short example:
#
#            reconnect 1: the socket will wait 'recon_default' milliseconds
#            reconnect 2: 'recon_default' * 2
#            reconnect 3: ('recon_default' * 2) * 2
#            reconnect 4: value from previous interval * 2
#            reconnect 5: value from previous interval * 2
#            reconnect x: if value >= recon_max, it starts again with recon_default
#
# recon_randomize: generate a random wait time on minion start. The wait time will
#                  be a random value between recon_default and recon_default +
#                  recon_max. Having all minions reconnect with the same recon_default
#                  and recon_max value kind of defeats the purpose of being able to
#                  change these settings. If all minions have the same values and your
#                  setup is quite large (several thousand minions), they will still
#                  flood the master. The desired behaviour is to have timeframe within
#                  all minions try to reconnect.

# Example on how to use these settings:
# The goal: have all minions reconnect within a 60 second timeframe on a disconnect
#
# The settings:
#recon_default: 1000
<% if minion['recon_default'] -%>
recon_default: <%= minion['recon_default'] %>
<% end -%>
#recon_max: 59000
<% if minion['recon_max'] -%>
recon_max: <%= minion['recon_max'] %>
<% end -%>
#recon_randomize: True
<% if minion['recon_randomize'] -%>
recon_randomize: <%= minion['recon_randomize'] %>
<% end -%>
#
# Each minion will have a randomized reconnect value between 'recon_default'
# and 'recon_default + recon_max', which in this example means between 1000ms
# 60000ms (or between 1 and 60 seconds). The generated random-value will be
# doubled after each attempt to reconnect. Lets say the generated random
# value is 11 seconds (or 11000ms).
#
# reconnect 1: wait 11 seconds
# reconnect 2: wait 22 seconds
# reconnect 3: wait 33 seconds
# reconnect 4: wait 44 seconds
# reconnect 5: wait 55 seconds
# reconnect 6: wait time is bigger than 60 seconds (recon_default + recon_max)
# reconnect 7: wait 11 seconds
# reconnect 8: wait 22 seconds
# reconnect 9: wait 33 seconds
# reconnect x: etc.
#
# In a setup with ~6000 thousand hosts these settings would average the reconnects
# to about 100 per second and all hosts would be reconnected within 60 seconds.
#recon_default: 100
#recon_max: 5000
#recon_randomize: False

# The loop_interval sets how long in seconds the minion will wait between
# evaluating the scheduler and running cleanup tasks. This defaults to a
# sane 60 seconds, but if the minion scheduler needs to be evaluated more
# often lower this value
#loop_interval: 60
<% if minion['loop_interval'] -%>
loop_interval: <%= minion['loop_interval'] %>
<% end -%>

# When healing, a dns_check is run. This is to make sure that the originally
# resolved dns has not changed. If this is something that does not happen in
# your environment, set this value to False.
#dns_check: True
<% if minion['dns_check'] -%>
dns_check: <%= minion['dns_check'] %>
<% end -%>

# The grains_refresh_every setting allows for a minion to periodically check
# its grains to see if they have changed and, if so, to inform the master
# of the new grains. This operation is moderately expensive, therefore
# care should be taken not to set this value too low.
#
# Note: This value is expressed in __minutes__!
#
# A value of 10 minutes is a reasonable default.
#
# If the value is set to zero, this check is disabled.
#grains_refresh_every: 1

# Cache grains on the minion. Default is False.
# grains_cache: False

# Grains cache expiration, in seconds. If the cache file is older than this
# number of seconds then the grains cache will be dumped and fully re-populated
# with fresh data. Defaults to 5 minutes. Will have no effect if 'grains_cache'
# is not enabled.
# grains_cache_expiration: 300

# Windows platforms lack posix IPC and must rely on slower TCP based inter-
# process communications. Set ipc_mode to 'tcp' on such systems
#ipc_mode: ipc
<% if minion['ipc_mode'] -%>
ipc_mode: <%= minion['ipc_mode'] %>
<% end -%>
#
# Overwrite the default tcp ports used by the minion when in tcp mode
#tcp_pub_port: 4510
<% if minion['tcp_pub_port'] -%>
tcp_pub_port: <%= minion['tcp_pub_port'] %>
<% end -%>
#tcp_pull_port: 4511
<% if minion['tcp_pull_port'] -%>
tcp_pull_port: <%= minion['tcp_pull_port'] %>
<% end -%>

# Passing very large events can cause the minion to consume large amounts of
# memory. This value tunes the maximum size of a message allowed onto the
# minion event bus. The value is expressed in bytes.
#max_event_size: 1048576

# The minion can include configuration from other files. To enable this,
# pass a list of paths to this option. The paths can be either relative or
# absolute; if relative, they are considered to be relative to the directory
# the main minion configuration file lives in (this file). Paths can make use
# of shell-style globbing. If no files are matched by a path passed to this
# option then the minion will log a warning message.
#
#
# Include a config file from some other path:
# include: /etc/salt/extra_config
#
# Include config from several files and directories:
#include:
#  - /etc/salt/extra_config
#  - /etc/roles/webserver
<% if minion['include'] and minion['include'].size > 0 -%>
include:
<% minion['include'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>

#####   Minion module management     #####
##########################################
# Disable specific modules. This allows the admin to limit the level of
# access the master has to the minion
#disable_modules: [cmd,test]
<% if minion['disable_modules'] and minion['disable_modules'].size > 0 -%>
disable_modules:
<% minion['disable_modules'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>
#disable_returners: []
<% if minion['disable_returners'] and minion['disable_returners'].size > 0 -%>
disable_returners:
<% minion['disable_returners'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>
#
# Modules can be loaded from arbitrary paths. This enables the easy deployment
# of third party modules. Modules for returners and minions can be loaded.
# Specify a list of extra directories to search for minion modules and
# returners. These paths must be fully qualified!
#module_dirs: []
<% if minion['disable_returners'] and minion['disable_returners'].size > 0 -%>
disable_returners:
<% minion['disable_returners'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>
#returner_dirs: []
<% if minion['returner_dirs'] and minion['returner_dirs'].size > 0 -%>
returner_dirs:
<% minion['returner_dirs'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>
#states_dirs: []
<% if minion['states_dirs'] and minion['states_dirs'].size > 0 -%>
states_dirs:
<% minion['states_dirs'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>
#render_dirs: []
<% if minion['render_dirs'] and minion['render_dirs'].size > 0 -%>
render_dirs:
<% minion['render_dirs'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>
#
# A module provider can be statically overwritten or extended for the minion
# via the providers option, in this case the default module will be
# overwritten by the specified module. In this example the pkg module will
# be provided by the yumpkg5 module instead of the system default.
#
#providers:
#  pkg: yumpkg5
#
# Enable Cython modules searching and loading. (Default: False)
#cython_enable: False
<% if minion['user'] -%>
user: <%= minion['user'] %>
<% end -%>

#####    State Management Settings    #####
###########################################
# The state management system executes all of the state templates on the minion
# to enable more granular control of system state management. The type of
# template and serialization used for state management needs to be configured
# on the minion, the default renderer is yaml_jinja. This is a yaml file
# rendered from a jinja template, the available options are:
# yaml_jinja
# yaml_mako
# yaml_wempy
# json_jinja
# json_mako
# json_wempy
#
#renderer: yaml_jinja
<% if minion['renderer'] -%>
renderer: <%= minion['renderer'] %>
<% end -%>
#
# The failhard option tells the minions to stop immediately after the first
# failure detected in the state execution, defaults to False
#failhard: False
<% if minion['failhard'] -%>
failhard: <%= minion['failhard'] %>
<% end -%>
#
# autoload_dynamic_modules Turns on automatic loading of modules found in the
# environments on the master. This is turned on by default, to turn of
# autoloading modules when states run set this value to False
#autoload_dynamic_modules: True
<% if minion['autoload_dynamic_modules'] -%>
autoload_dynamic_modules: <%= minion['autoload_dynamic_modules'] %>
<% end -%>
#
# clean_dynamic_modules keeps the dynamic modules on the minion in sync with
# the dynamic modules on the master, this means that if a dynamic module is
# not on the master it will be deleted from the minion. By default this is
# enabled and can be disabled by changing this value to False
#clean_dynamic_modules: True
<% if minion['clean_dynamic_modules'] -%>
clean_dynamic_modules: <%= minion['clean_dynamic_modules'] %>
<% end -%>
#
# Normally the minion is not isolated to any single environment on the master
# when running states, but the environment can be isolated on the minion side
# by statically setting it. Remember that the recommended way to manage
# environments is to isolate via the top file.
#environment: None
<% if minion['environment'] -%>
environment: <%= minion['environment'] %>
<% end -%>
#
# If using the local file directory, then the state top file name needs to be
# defined, by default this is top.sls.
#state_top: top.sls
<% if minion['state_top'] -%>
state_top: <%= minion['state_top'] %>
<% end -%>
#
# Run states when the minion daemon starts. To enable, set startup_states to:
# 'highstate' -- Execute state.highstate
# 'sls' -- Read in the sls_list option and execute the named sls files
# 'top' -- Read top_file option and execute based on that file on the Master
#startup_states: ''
<% if minion['startup_states'] -%>
startup_states: <%= minion['startup_states'] %>
<% end -%>
#
# list of states to run when the minion starts up if startup_states is 'sls'
#sls_list:
#  - edit.vim
#  - hyper
<% if minion['sls_list'] and minion['sls_list'].size > 0 -%>
include:
<% minion['sls_list'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>
#
# top file to execute if startup_states is 'top'
#top_file: ''
<% if minion['top_file'] -%>
top_file: <%= minion['top_file'] %>
<% end -%>

#####     File Directory Settings    #####
##########################################
# The Salt Minion can redirect all file server operations to a local directory,
# this allows for the same state tree that is on the master to be used if
# copied completely onto the minion. This is a literal copy of the settings on
# the master but used to reference a local directory on the minion.

# Set the file client. The client defaults to looking on the master server for
# files, but can be directed to look at the local file directory setting
# defined below by setting it to local.
#file_client: remote
<% if minion['file_client'] -%>
file_client: <%= minion['file_client'] %>
<% end -%>

# The file directory works on environments passed to the minion, each environment
# can have multiple root directories, the subdirectories in the multiple file
# roots cannot match, otherwise the downloaded files will not be able to be
# reliably ensured. A base environment is required to house the top file.
# Example:
# file_roots:
#   base:
#     - /srv/salt/
#   dev:
#     - /srv/salt/dev/services
#     - /srv/salt/dev/states
#   prod:
#     - /srv/salt/prod/services
#     - /srv/salt/prod/states
#
#file_roots:
#  base:
#    - /srv/salt
file_roots:
  base:
    - /srv/states/
  dev:
    - /srv/dev/states/
  prod:
    - /srv/prod/states/

# The hash_type is the hash to use when discovering the hash of a file in
# the local fileserver. The default is md5, but sha1, sha224, sha256, sha384
# and sha512 are also supported.
#hash_type: md5
<% if minion['hash_type'] -%>
hash_type: <%= minion['hash_type'] %>
<% end -%>

# The Salt pillar is searched for locally if file_client is set to local. If
# this is the case, and pillar data is defined, then the pillar_roots need to
# also be configured on the minion:
#pillar_roots:
#  base:
#    - /srv/pillar
pillar_roots:
  base:
    - /srv/pillar
  dev:
    - /srv/dev/pillar/
  prod:
    - /srv/prod/pillar/

######        Security settings       #####
###########################################
# Enable "open mode", this mode still maintains encryption, but turns off
# authentication, this is only intended for highly secure environments or for
# the situation where your keys end up in a bad state. If you run in open mode
# you do so at your own risk!
#open_mode: False
<% if minion['open_mode'] -%>
open_mode: <%= minion['open_mode'] %>
<% end -%>

# Enable permissive access to the salt keys.  This allows you to run the
# master or minion as root, but have a non-root group be given access to
# your pki_dir.  To make the access explicit, root must belong to the group
# you've given access to. This is potentially quite insecure.
#permissive_pki_access: False
<% if minion['permissive_pki_access'] -%>
permissive_pki_access: <%= minion['permissive_pki_access'] %>
<% end -%>

# The state_verbose and state_output settings can be used to change the way
# state system data is printed to the display. By default all data is printed.
# The state_verbose setting can be set to True or False, when set to False
# all data that has a result of True and no changes will be suppressed.
#state_verbose: True
<% if minion['state_verbose'] -%>
state_verbose: <%= minion['state_verbose'] %>
<% end -%>
#
# The state_output setting changes if the output is the full multi line
# output for each changed state if set to 'full', but if set to 'terse'
# the output will be shortened to a single line.
#state_output: full
<% if minion['state_output'] -%>
state_output: <%= minion['state_output'] %>
<% end -%>
#

# The state_output_diff setting changes whether or not the output from
# successful states is returned. Useful when even the terse output of these
# states is cluttering the logs. Set it to True to ignore them.
#state_output_diff: False

# Fingerprint of the master public key to double verify the master is valid,
# the master fingerprint can be found by running "salt-key -F master" on the
# salt master.
#master_finger: ''
<% if minion['master_finger'] -%>
master_finger: <%= minion['master_finger'] %>
<% end -%>

######         Thread settings        #####
###########################################
# Disable multiprocessing support, by default when a minion receives a
# publication a new process is spawned and the command is executed therein.
#multiprocessing: True
<% if minion['multiprocessing'] -%>
multiprocessing: <%= minion['multiprocessing'] %>
<% end -%>

#####         Logging settings       #####
##########################################
# The location of the minion log file
# The minion log can be sent to a regular file, local path name, or network
# location. Remote logging works best when configured to use rsyslogd(8) (e.g.:
# ``file:///dev/log``), with rsyslogd(8) configured for network logging. The URI
# format is: <file|udp|tcp>://<host|socketpath>:<port-if-required>/<log-facility>
#log_file: /var/log/salt/minion
#log_file: file:///dev/log
#log_file: udp://loghost:10514
#
#log_file: /var/log/salt/minion
<% if minion['log_file'] -%>
log_file: <%= minion['log_file'] %>
<% end -%>
#key_logfile: /var/log/salt/key
<% if minion['key_logfile'] -%>
key_logfile: <%= minion['key_logfile'] %>
<% end -%>
#
# The level of messages to send to the console.
# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.
# Default: 'warning'
#log_level: warning
<% if minion['user'] -%>
user: <%= minion['user'] %>
<% end -%>
#
# The level of messages to send to the log file.
# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.
# Default: 'warning'
#log_level_logfile:
<% if minion['log_level_logfile'] -%>
log_level_logfile: <%= minion['log_level_logfile'] %>
<% end -%>

# The date and time format used in log messages. Allowed date/time formating
# can be seen here: http://docs.python.org/library/time.html#time.strftime
#log_datefmt: '%H:%M:%S'
<% if minion['log_datefmt'] -%>
log_datefmt: <%= minion['log_datefmt'] %>
<% end -%>
#log_datefmt_logfile: '%Y-%m-%d %H:%M:%S'
<% if minion['log_datefmt_logfile'] -%>
log_datefmt_logfile: <%= minion['log_datefmt_logfile'] %>
<% end -%>
#
# The format of the console logging messages. Allowed formatting options can
# be seen here: http://docs.python.org/library/logging.html#logrecord-attributes
#log_fmt_console: '[%(levelname)-8s] %(message)s'
<% if minion['log_fmt_console'] -%>
log_fmt_console: <%= minion['log_fmt_console'] %>
<% end -%>
#log_fmt_logfile: '%(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s'
<% if minion['log_fmt_logfile'] -%>
log_fmt_logfile: <%= minion['log_fmt_logfile'] %>
<% end -%>
#
# This can be used to control logging levels more specificically.  This
# example sets the main salt library at the 'warning' level, but sets
# 'salt.modules' to log at the 'debug' level:
#   log_granular_levels:
#     'salt': 'warning',
#     'salt.modules': 'debug'
#
#log_granular_levels: {}
<% if minion['log_granular_levels'] and minion['log_granular_levels'].size > 0 -%>
log_granular_levels:
<% minion['log_granular_levels'].each_pair do |key,value| -%>
  <%= key %>: <%= value %>
<% end -%>
<% end -%>

######      Module configuration      #####
###########################################
# Salt allows for modules to be passed arbitrary configuration data, any data
# passed here in valid yaml format will be passed on to the salt minion modules
# for use. It is STRONGLY recommended that a naming convention be used in which
# the module name is followed by a . and then the value. Also, all top level
# data must be applied via the yaml dict construct, some examples:
#
# You can specify that all modules should run in test mode:
#test: True
<% if minion['test'] -%>
test: <%= minion['test'] %>
<% end -%>
#
# A simple value for the test module:
#test.foo: foo
#
# A list for the test module:
#test.bar: [baz,quo]
#
# A dict for the test module:
#test.baz: {spam: sausage, cheese: bread}


######      Update settings          ######
###########################################
# Using the features in Esky, a salt minion can both run as a frozen app and
# be updated on the fly. These options control how the update process
# (saltutil.update()) behaves.
#
# The url for finding and downloading updates. Disabled by default.
#update_url: False
<% if minion['update_url'] -%>
update_url: <%= minion['update_url'] %>
<% end -%>
#
# The list of services to restart after a successful update. Empty by default.
#update_restart_services: []
<% if minion['update_restart_services'] and minion['update_restart_services'].size > 0 -%>
update_restart_services:
<% minion['update_restart_services'].each do |file| -%>
  - <%= file %>
<% end -%>
<% end -%>

######      Keepalive settings        ######
############################################
# ZeroMQ now includes support for configuring SO_KEEPALIVE if supported by
# the OS. If connections between the minion and the master pass through
# a state tracking device such as a firewall or VPN gateway, there is
# the risk that it could tear down the connection the master and minion
# without informing either party that their connection has been taken away.
# Enabling TCP Keepalives prevents this from happening.
#
# Overall state of TCP Keepalives, enable (1 or True), disable (0 or False)
# or leave to the OS defaults (-1), on Linux, typically disabled. Default True, enabled.
#tcp_keepalive: True
<% if minion['tcp_keepalive'] -%>
tcp_keepalive: <%= minion['tcp_keepalive'] %>
<% end -%>
#
# How long before the first keepalive should be sent in seconds. Default 300
# to send the first keepalive after 5 minutes, OS default (-1) is typically 7200 seconds
# on Linux see /proc/sys/net/ipv4/tcp_keepalive_time.
#tcp_keepalive_idle: 300
<% if minion['tcp_keepalive_idle'] -%>
tcp_keepalive_idle: <%= minion['tcp_keepalive_idle'] %>
<% end -%>
#
# How many lost probes are needed to consider the connection lost. Default -1
# to use OS defaults, typically 9 on Linux, see /proc/sys/net/ipv4/tcp_keepalive_probes.
#tcp_keepalive_cnt: -1
<% if minion['tcp_keepalive_cnt'] -%>
tcp_keepalive_cnt: <%= minion['tcp_keepalive_cnt'] %>
<% end -%>
#
# How often, in seconds, to send keepalives after the first one. Default -1 to
# use OS defaults, typically 75 seconds on Linux, see
# /proc/sys/net/ipv4/tcp_keepalive_intvl.
#tcp_keepalive_intvl: -1
<% if minion['tcp_keepalive_intvl'] -%>
tcp_keepalive_intvl: <%= minion['tcp_keepalive_intvl'] %>
<% end -%>

######      Windows Software settings ######
############################################
# Location of the repository cache file on the master
#win_repo_cachefile: 'salt://win/repo/winrepo.p'
<% if minion['win_repo_cachefile'] -%>
win_repo_cachefile: <%= minion['win_repo_cachefile'] %>
<% end -%>


#Mine functions
<% if minion['mine_functions'] and minion['mine_functions'].size > 0 -%>
<%= YAML.dump({'mine_functions' => minion['mine_functions']}).sub(/.*?\n/, '') %>
<% else -%>
mine_functions:
  grains.item:
    - fqdn
    - localhost
    - nodename
    - host
    - fqdn_ip4
    - fqdn_ip6
    - roles
    - tags
    - attributes
<% end -%>

#Mine interval
<% if minion['mine_interval'] -%>
mine_interval: <%= minion['mine_interval'] %>
<% else -%>
mine_interval: 60
<% end -%>
